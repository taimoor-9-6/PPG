# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qraxOtIhrwsx_KxDI7vLS3FdCeo2QjyM
"""

import pandas as pd
import seaborn as sns
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt
from sklearn.metrics import r2_score

#Importing google drive
from google.colab import drive
drive.mount('/content/drive')

bidmc_corenet=pd.read_csv('drive/My Drive/RAship/bidmc_corenet_preds_true_temp_200.csv')
bidmc_corenet_priors=pd.read_csv('drive/My Drive/RAship/bidmc_corenet_priors_preds_true_temp_200.csv')
bidmc_resnet=pd.read_csv('drive/My Drive/RAship/bidmc_resnet_preds_true_temp.csv')
bidmc_resnet_priors=pd.read_csv('drive/My Drive/RAship/bidmc_resnet_priors_preds_true_temp.csv')
bidmc_unet=pd.read_csv('drive/My Drive/RAship/bidmc_unet_true.csv')

syn_corenet=pd.read_csv('drive/My Drive/RAship/syn_corenet_preds_true_temp.csv')
syn_corenet_priors=pd.read_csv('drive/My Drive/RAship/syn_corenet_priors_preds_true_temp.csv')
syn_resnet=pd.read_csv('drive/My Drive/RAship/syn_resnet_preds_true_temp.csv')
syn_resnet_priors=pd.read_csv('drive/My Drive/RAship/syn_resnet_priors_preds_true_temp.csv')
syn_unet=pd.read_csv('drive/My Drive/RAship/syn_unet_true.csv')

"""# MAE"""

#Calculating mean absolute error and standard deviation
avg_mae_bidmc_corenet=mean_absolute_error(bidmc_corenet.true,bidmc_corenet.preds)
avg_std_bidmc_corenet=np.std(bidmc_corenet.true-bidmc_corenet.preds)
print("Mean absolute error and Standard Deviation for dataset bidmc on algorithm corenet without priors dataset is=", avg_mae_bidmc_corenet,"+-",avg_std_bidmc_corenet)

#Calculating mean absolute error and standard deviation
avg_mae_bidmc_corenet_priors=mean_absolute_error(bidmc_corenet_priors.true,bidmc_corenet_priors.preds)
avg_std_bidmc_corenet_priors=np.std(bidmc_corenet_priors.true-bidmc_corenet_priors.preds)
print("Mean absolute error and Standard Deviation for dataset bidmc on algorithm corenet with priors dataset is=", avg_mae_bidmc_corenet_priors,"+-",avg_std_bidmc_corenet_priors)

#Calculating mean absolute error and standard deviation
avg_mae_bidmc_resnet=mean_absolute_error(bidmc_resnet.true,bidmc_resnet.preds)
avg_std_bidmc_resnet=np.std(bidmc_resnet.true-bidmc_resnet.preds)
print("Mean absolute error and Standard Deviation for dataset bidmc on algorithm resnet without priors dataset is=", avg_mae_bidmc_resnet,"+-",avg_std_bidmc_resnet)

#Calculating mean absolute error and standard deviation
avg_mae_bidmc_resnet_priors=mean_absolute_error(bidmc_resnet_priors.true,bidmc_resnet_priors.preds)
avg_std_bidmc_resnet_priors=np.std(bidmc_resnet_priors.true-bidmc_resnet_priors.preds)
print("Mean absolute error and Standard Deviation for dataset bidmc on algorithm resnet with priors dataset is=", avg_mae_bidmc_resnet_priors,"+-",avg_std_bidmc_resnet_priors)

#Calculating mean absolute error and standard deviation
avg_mae_bidmc_unet=mean_absolute_error(bidmc_unet.true,bidmc_unet.preds)
avg_std_bidmc_unet=np.std(bidmc_unet.true-bidmc_unet.preds)
print("Mean absolute error and Standard Deviation for dataset bidmc on algorithm unet dataset is=", avg_mae_bidmc_unet,"+-",avg_std_bidmc_unet)

#Calculating mean absolute error and standard deviation
avg_mae_syn_corenet=mean_absolute_error(syn_corenet.true,syn_corenet.preds)
avg_std_syn_corenet=np.std(syn_corenet.true-syn_corenet.preds)
print("Mean absolute error and Standard Deviation for synthetic dataset on algorithm corenet without priors dataset is=", avg_mae_syn_corenet,"+-",avg_std_syn_corenet)

#Calculating mean absolute error and standard deviation
avg_mae_syn_corenet_priors=mean_absolute_error(syn_corenet_priors.true,syn_corenet_priors.preds)
avg_std_syn_corenet_priors=np.std(syn_corenet_priors.true-syn_corenet_priors.preds)
print("Mean absolute error and Standard Deviation for synthetic dataset on algorithm corenet with priors dataset is=", avg_mae_syn_corenet_priors,"+-",avg_std_syn_corenet_priors)

#Calculating mean absolute error and standard deviation
avg_mae_syn_resnet=mean_absolute_error(syn_resnet.true,syn_resnet.preds)
avg_std_syn_resnet=np.std(syn_resnet.true-syn_resnet.preds)
print("Mean absolute error and Standard Deviation for synthetic dataset on algorithm resnet without priors dataset is=", avg_mae_syn_resnet,"+-",avg_std_syn_resnet)

#Calculating mean absolute error and standard deviation
avg_mae_syn_resnet_priors=mean_absolute_error(syn_resnet_priors.true,syn_resnet_priors.preds)
avg_std_syn_resnet_priors=np.std(syn_resnet_priors.true-syn_resnet_priors.preds)
print("Mean absolute error and Standard Deviation for synthetic dataset on algorithm resnet with priors dataset is=", avg_mae_syn_resnet_priors,"+-",avg_std_syn_resnet_priors)

#Calculating mean absolute error and standard deviation
avg_mae_syn_unet=mean_absolute_error(syn_unet.true,syn_unet.preds)
avg_std_syn_unet=np.std(syn_unet.true-syn_unet.preds)
print("Mean absolute error and Standard Deviation for synthetic dataset on algorithm unet dataset is=", avg_mae_syn_unet,"+-",avg_std_syn_unet)

#BIDMC
temp=np.abs(bidmc_corenet.true-bidmc_corenet.preds)
mae_bidmc_corenet = pd.DataFrame({'CoreNet':temp})

temp=np.abs(bidmc_corenet_priors.true-bidmc_corenet_priors.preds)
mae_bidmc_corenet_priors = pd.DataFrame({'CoreNet+UNet':temp})

temp=np.abs(bidmc_resnet.true-bidmc_resnet.preds)
mae_bidmc_resnet = pd.DataFrame({'ResNet':temp})

temp=np.abs(bidmc_resnet_priors.true-bidmc_resnet_priors.preds)
mae_bidmc_resnet_priors = pd.DataFrame({'ResNet+UNet':temp})

temp=np.abs(bidmc_unet.true-bidmc_unet.preds)
mae_bidmc_unet = pd.DataFrame({'UNet':temp})


#Synthetic dataset
temp=np.abs(syn_corenet.true-syn_corenet.preds)
mae_syn_corenet = pd.DataFrame({'CoreNet':temp})

temp=np.abs(syn_corenet_priors.true-syn_corenet_priors.preds)
mae_syn_corenet_priors = pd.DataFrame({'CoreNet+UNet':temp})

temp=np.abs(syn_resnet.true-syn_resnet.preds)
mae_syn_resnet = pd.DataFrame({'ResNet':temp})

temp=np.abs(syn_resnet_priors.true-syn_resnet_priors.preds)
mae_syn_resnet_priors = pd.DataFrame({'ResNet+UNet':temp})

temp=np.abs(syn_unet.true-syn_unet.preds)
mae_syn_unet = pd.DataFrame({'UNet':temp})

mae_bidmc_corenet=mae_bidmc_corenet.iloc[0:12585,:]
mae_bidmc_corenet_priors=mae_bidmc_corenet_priors.iloc[0:12585,:]
mae_bidmc_resnet=mae_bidmc_resnet.iloc[0:12585,:]
mae_bidmc_resnet_priors=mae_bidmc_resnet_priors.iloc[0:12585,:]
mae_bidmc_unet=mae_bidmc_unet.iloc[0:12585,:]

bidmc_mae=pd.concat([mae_bidmc_corenet,mae_bidmc_corenet_priors,mae_bidmc_resnet,mae_bidmc_resnet_priors,mae_bidmc_unet],axis=1)
bidmc_mae

syn_mae=pd.concat([mae_syn_corenet,mae_syn_corenet_priors,mae_syn_resnet,mae_syn_resnet_priors,mae_syn_unet],axis=1)
syn_mae

sns.boxplot(data=bidmc_mae,orient='h',linewidth=None,showfliers=False);
# plt.title('Distribution of mean absolute error with bidmc')
plt.xlabel('MAE')
plt.show()

sns.boxplot(data=syn_mae,orient='h',linewidth=None,showfliers=False);
# plt.title('Distribution of mean absolute error with syn')
plt.xlabel('MAE')
plt.show()



"""# MSE"""

#Calculating mresnet_priorsean squared error and standard deviation
avg_mse_bidmc_corenet=mean_squared_error(bidmc_corenet.true,bidmc_corenet.preds)
print("Mean squared error for dataset bidmc on algorithm corenet without priors dataset is=", avg_mse_bidmc_corenet)

#Calculating mean squared error and standard deviation
avg_mse_bidmc_corenet_priors=mean_squared_error(bidmc_corenet_priors.true,bidmc_corenet_priors.preds)
print("Mean squared error for dataset bidmc on algorithm corenet with priors dataset is=", avg_mse_bidmc_corenet_priors)

#Calculating mean squared error and standard deviation
avg_mse_bidmc_resnet=mean_squared_error(bidmc_resnet.true,bidmc_resnet.preds)
print("Mean squared error for dataset bidmc on algorithm resnet without priors dataset is=", avg_mse_bidmc_resnet)

#Calculating mean squared error and standard deviation
avg_mse_bidmc_resnet_priors=mean_squared_error(bidmc_resnet_priors.true,bidmc_resnet_priors.preds)
print("Mean squared error for dataset bidmc on algorithm resnet with priors dataset is=", avg_mse_bidmc_resnet_priors)

#Calculating mean squared error and standard deviation
avg_mse_bidmc_unet=mean_squared_error(bidmc_unet.true,bidmc_unet.preds)
print("Mean squared error for dataset bidmc on algorithm unet is=", avg_mse_bidmc_unet)

#Calculating mean squared error and standard deviation
avg_mse_syn_corenet=mean_squared_error(syn_corenet.true,syn_corenet.preds)
print("Mean squared error for dataset syn on algorithm corenet without priors dataset is=", avg_mse_syn_corenet)

#Calculating mean squared error and standard deviation
avg_mse_syn_corenet_priors=mean_squared_error(syn_corenet_priors.true,syn_corenet_priors.preds)
print("Mean squared error for dataset syn on algorithm corenet with priors dataset is=", avg_mse_syn_corenet_priors)

#Calculating mean squared error and standard deviation
avg_mse_syn_resnet=mean_squared_error(syn_resnet.true,syn_resnet.preds)
print("Mean squared error for dataset syn on algorithm resnet without priors dataset is=", avg_mse_syn_resnet)

#Calculating mean squared error and standard deviation
avg_mse_syn_resnet_priors=mean_squared_error(syn_resnet_priors.true,syn_resnet_priors.preds)
print("Mean squared error for dataset syn on algorithm resnet with priors dataset is=", avg_mse_syn_resnet_priors)

#Calculating mean squared error and standard deviation
avg_mse_syn_unet=mean_squared_error(syn_unet.true,syn_unet.preds)
print("Mean squared error for dataset syn on algorithm unet is=", avg_mse_syn_unet)

#BIDMC
temp=np.square(bidmc_corenet.true-bidmc_corenet.preds)
mse_bidmc_corenet = pd.DataFrame({'CoreNet':temp})

temp=np.square(bidmc_corenet_priors.true-bidmc_corenet_priors.preds)
mse_bidmc_corenet_priors = pd.DataFrame({'CoreNet+UNet':temp})

temp=np.square(bidmc_resnet.true-bidmc_resnet.preds)
mse_bidmc_resnet = pd.DataFrame({'ResNet':temp})

temp=np.square(bidmc_resnet_priors.true-bidmc_resnet_priors.preds)
mse_bidmc_resnet_priors = pd.DataFrame({'ResNet+UNet':temp})

temp=np.square(bidmc_unet.true-bidmc_unet.preds)
mse_bidmc_unet = pd.DataFrame({'UNet':temp})


#Synthetic dataset
temp=np.square(syn_corenet.true-syn_corenet.preds)
mse_syn_corenet = pd.DataFrame({'CoreNet':temp})

temp=np.square(syn_corenet_priors.true-syn_corenet_priors.preds)
mse_syn_corenet_priors = pd.DataFrame({'CoreNet+UNet':temp})

temp=np.square(syn_resnet.true-syn_resnet.preds)
mse_syn_resnet = pd.DataFrame({'ResNet':temp})

temp=np.square(syn_resnet_priors.true-syn_resnet_priors.preds)
mse_syn_resnet_priors = pd.DataFrame({'ResNet+UNet':temp})

temp=np.square(syn_unet.true-syn_unet.preds)
mse_syn_unet = pd.DataFrame({'UNet':temp})

mse_bidmc_corenet=mse_bidmc_corenet.iloc[0:12585,:]
mse_bidmc_corenet_priors=mse_bidmc_corenet_priors.iloc[0:12585,:]
mse_bidmc_resnet=mse_bidmc_resnet.iloc[0:12585,:]
mse_bidmc_resnet_priors=mse_bidmc_resnet_priors.iloc[0:12585,:]
mse_bidmc_unet=mse_bidmc_unet.iloc[0:12585,:]

bidmc_mse=pd.concat([mse_bidmc_corenet,mse_bidmc_corenet_priors,mse_bidmc_resnet,mse_bidmc_resnet_priors,mse_bidmc_unet],axis=1)
bidmc_mse

syn_mse=pd.concat([mse_syn_corenet,mse_syn_corenet_priors,mse_syn_resnet,mse_syn_resnet_priors,mse_syn_unet],axis=1)
syn_mse

sns.boxplot(data=bidmc_mse,orient='h',linewidth=None,showfliers=False);
# plt.title('Distribution of mean absolute error with bidmc')
plt.xlabel('MSE')
plt.show()

sns.boxplot(data=syn_mse,orient='h',linewidth=None,showfliers=False);
# plt.title('Distribution of mean absolute error with syn')
plt.xlabel("MSE")
plt.show()

"""# Extra

"""

sns.scatterplot(data=bidmc_corenet,x=bidmc_corenet.true,y=bidmc_corenet.preds)
plt.show()

sns.scatterplot(data=bidmc_corenet_priors,x='true',y='preds')
plt.show()

sns.scatterplot(data=bidmc_resnet,x='true',y='preds')
plt.show()

sns.scatterplot(data=bidmc_resnet_priors,x='true',y='preds')
plt.show()

sns.scatterplot(data=syn_corenet,x='true',y='preds')
plt.show()

sns.scatterplot(data=syn_corenet_priors,x='true',y='preds')
plt.show()

sns.scatterplot(data=syn_resnet,x='true',y='preds')
plt.show()

sns.scatterplot(data=syn_resnet_priors,x='true',y='preds')
plt.show()



"""# Loss"""

#BIDMC
bidmc_corenet_loss=pd.read_csv('drive/My Drive/RAship/bidmc_corenet_loss_200.csv')
bidmc_corenet_loss.drop('Unnamed: 0',inplace=True,axis=1)

bidmc_corenet_priors_loss=pd.read_csv('drive/My Drive/RAship/bidmc_corenet_loss_prior_200.csv')
bidmc_corenet_priors_loss.drop('Unnamed: 0',inplace=True,axis=1)

bidmc_resnet_loss=pd.read_csv('drive/My Drive/RAship/bidmc_resnet_loss.csv')
bidmc_resnet_loss.drop('Unnamed: 0',inplace=True,axis=1)

bidmc_resnet_priors_loss=pd.read_csv('drive/My Drive/RAship/bidmc_resnet_loss_prior.csv')
bidmc_resnet_priors_loss.drop('Unnamed: 0',inplace=True,axis=1)

bidmc_unet_loss=pd.read_csv('drive/My Drive/RAship/bidmc_unet_loss.csv')
bidmc_unet_loss.drop('Unnamed: 0',inplace=True,axis=1)


#Synyhetic Dataset
syn_corenet_loss=pd.read_csv('drive/My Drive/RAship/syn_corenet_loss.csv')
syn_corenet_loss.drop('Unnamed: 0',inplace=True,axis=1)

syn_corenet_priors_loss=pd.read_csv('drive/My Drive/RAship/syn_corenet_loss_prior.csv')
syn_corenet_priors_loss.drop('Unnamed: 0',inplace=True,axis=1)

syn_resnet_loss=pd.read_csv('drive/My Drive/RAship/syn_resnet_loss.csv')
syn_resnet_loss.drop('Unnamed: 0',inplace=True,axis=1)

syn_resnet_priors_loss=pd.read_csv('drive/My Drive/RAship/syn_resnet_loss_prior.csv')
syn_resnet_priors_loss.drop('Unnamed: 0',inplace=True,axis=1)

syn_unet_loss=pd.read_csv('drive/My Drive/RAship/syn_unet_loss.csv')
syn_unet_loss.drop('Unnamed: 0',inplace=True,axis=1)

sns.lineplot(data=bidmc_corenet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=bidmc_corenet_priors_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=bidmc_resnet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=bidmc_resnet_priors_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=syn_corenet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=syn_corenet_priors_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=syn_resnet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=syn_resnet_priors_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=syn_unet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

sns.lineplot(data=bidmc_unet_loss)
plt.ylabel("Loss")
plt.xlabel("Epoch Number")

"""# RMSE"""

#Calculating mean squared error and standard deviation
avg_rmse_bidmc_corenet=sqrt(mean_squared_error(bidmc_corenet.true,bidmc_corenet.preds))
print("Root Mean squared error for dataset bidmc on algorithm corenet without priors dataset is=", avg_rmse_bidmc_corenet)

#Calculating mean squared error and standard deviation
avg_rmse_bidmc_corenet_priors=sqrt(mean_squared_error(bidmc_corenet_priors.true,bidmc_corenet_priors.preds))
print("Root Mean squared error for dataset bidmc on algorithm corenet with priors dataset is=", avg_rmse_bidmc_corenet_priors)

#Calculating mean squared error and standard deviation
avg_rmse_bidmc_resnet=sqrt(mean_squared_error(bidmc_resnet.true,bidmc_resnet.preds))
print("Root Mean squared error for dataset bidmc on algorithm resnet without priors dataset is=", avg_rmse_bidmc_resnet)

#Calculating mean squared error and standard deviation
avg_rmse_bidmc_resnet_priors=sqrt(mean_squared_error(bidmc_resnet_priors.true,bidmc_resnet_priors.preds))
print("Root Mean squared error for dataset bidmc on algorithm resnet with priors dataset is=", avg_rmse_bidmc_resnet_priors)

#Calculating mean squared error and standard deviation
avg_rmse_syn_corenet=sqrt(mean_squared_error(syn_corenet.true,syn_corenet.preds))
print("Root Mean squared error for dataset syn on algorithm corenet without priors dataset is=", avg_rmse_syn_corenet)

#Calculating mean squared error and standard deviation
avg_rmse_syn_corenet_priors=sqrt(mean_squared_error(syn_corenet_priors.true,syn_corenet_priors.preds))
print("Root Mean squared error for dataset syn on algorithm corenet with priors dataset is=", avg_rmse_syn_corenet_priors)

#Calculating mean squared error and standard deviation
avg_rmse_syn_resnet=sqrt(mean_squared_error(syn_resnet.true,syn_resnet.preds))
print("Root Mean squared error for dataset syn on algorithm resnet without priors dataset is=", avg_rmse_syn_resnet)

#Calculating mean squared error and standard deviation
avg_rmse_syn_resnet_priors=sqrt(mean_squared_error(syn_resnet_priors.true,syn_resnet_priors.preds))
print("Root Mean squared error for dataset syn on algorithm resnet with priors dataset is=", avg_rmse_syn_resnet_priors)



"""# R2"""

#Calculating mean squared error and standard deviation
avg_r2_bidmc_corenet=r2_score(bidmc_corenet.true,bidmc_corenet.preds)
print("R2 score for dataset bidmc on algorithm corenet without priors dataset is=", avg_r2_bidmc_corenet)

#Calculating mean squared error and standard deviation
avg_r2_bidmc_corenet_priors=r2_score(bidmc_corenet_priors.true,bidmc_corenet_priors.preds)
print("R2 score for dataset bidmc on algorithm corenet with priors dataset is=", avg_r2_bidmc_corenet_priors)

#Calculating mean squared error and standard deviation
avg_r2_bidmc_resnet=r2_score(bidmc_resnet.true,bidmc_resnet.preds)
print("R2 score for dataset bidmc on algorithm resnet without priors dataset is=", avg_r2_bidmc_resnet)

#Calculating mean squared error and standard deviation
avg_r2_bidmc_resnet_priors=r2_score(bidmc_resnet_priors.true,bidmc_resnet_priors.preds)
print("R2 score for dataset bidmc on algorithm resnet with priors dataset is=", avg_r2_bidmc_resnet_priors)

#Calculating mean squared error and standard deviation
avg_r2_bidmc_unet=r2_score(bidmc_unet.true,bidmc_unet.preds)
print("R2 score for dataset bidmc on algorithm unet is=", avg_r2_bidmc_unet)

#Calculating mean squared error and standard deviation
avg_r2_syn_corenet=r2_score(syn_corenet.true,syn_corenet.preds)
print("R2 score for dataset syn on algorithm corenet without priors dataset is=", avg_r2_syn_corenet)

#Calculating mean squared error and standard deviation
avg_r2_syn_corenet_priors=r2_score(syn_corenet_priors.true,syn_corenet_priors.preds)
print("R2 score for dataset syn on algorithm corenet with priors dataset is=", avg_r2_syn_corenet_priors)

#Calculating mean squared error and standard deviation
avg_r2_syn_resnet=r2_score(syn_resnet.true,syn_resnet.preds)
print("R2 score for dataset syn on algorithm resnet without priors dataset is=", avg_r2_syn_resnet)

#Calculating mean squared error and standard deviation
avg_r2_syn_resnet_priors=r2_score(syn_resnet_priors.true,syn_resnet_priors.preds)
print("R2 score for dataset syn on algorithm resnet with priors dataset is=", avg_r2_syn_resnet_priors)

#Calculating mean squared error and standard deviation
avg_r2_syn_unet=r2_score(syn_unet.true,syn_unet.preds)
print("R2 score for dataset syn on algorithm unet is=", avg_r2_syn_unet)

